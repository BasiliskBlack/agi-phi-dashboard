# Phixeo UI Component Framework
# Demonstrates the power of golden ratio-based UI design

import phixeo.ui as ui
import phixeo.math as math
import phixeo.animation as animation

// Golden ratio constant - the foundation of aesthetic design
const PHI = 1.618033988749895
const PHI_INV = 0.618033988749895

/**
 * PhiUI - A UI framework based on golden ratio principles
 * Creates visually harmonious interfaces with mathematically perfect proportions
 */
class PhiUI {
  constructor(theme = "dark") {
    this.theme = theme
    this.components = []
    this.containers = []
    this.gridSize = 8 // Base grid size
    this.phi = PHI // Golden ratio
    
    // Set color scheme based on theme
    this._setColorScheme()
    
    print("Initialized PhiUI framework with " + theme + " theme")
    print("Using φ (phi) = " + this.phi + " for proportional harmony")
  }
  
  function _setColorScheme() {
    if (this.theme === "dark") {
      this.colors = {
        background: "#121212",
        foreground: "#E0E0E0",
        primary: "#D4AF37", // Gold
        secondary: "#212121",
        accent: "#665826",
        border: "#333333",
        shadow: "rgba(0,0,0,0.5)"
      }
    } else {
      this.colors = {
        background: "#F5F5F5",
        foreground: "#121212",
        primary: "#D4AF37", // Gold
        secondary: "#E5E5E5",
        accent: "#E6D69C",
        border: "#CCCCCC",
        shadow: "rgba(0,0,0,0.1)"
      }
    }
    
    print("Set color scheme for " + this.theme + " theme")
  }
  
  function createContainer(options = {}) {
    var id = "container_" + (this.containers.length + 1)
    
    var defaults = {
      id: id,
      width: 800,
      height: 600,
      padding: this.gridSize * 2,
      gap: this.gridSize * PHI_INV
    }
    
    var container = { ...defaults, ...options }
    
    // Apply golden ratio if dimensions not explicitly set
    if (!options.height && options.width) {
      container.height = Math.round(options.width / this.phi)
    } else if (!options.width && options.height) {
      container.width = Math.round(options.height * this.phi)
    }
    
    // Store container
    this.containers.push(container)
    
    print(`Created container ${container.id} (${container.width}x${container.height})`)
    return container
  }
  
  function createComponent(type, options = {}) {
    var id = type + "_" + (this.components.length + 1)
    
    var defaults = {
      id: id,
      type: type,
      container: this.containers.length > 0 ? this.containers[0].id : null,
      width: this.gridSize * Math.round(PHI * 10),
      height: this.gridSize * Math.round(PHI * 6),
      x: this.gridSize * 2,
      y: this.gridSize * 2,
      text: "Phi Component",
      color: this.colors.primary,
      borderRadius: this.gridSize * PHI_INV
    }
    
    // Special defaults based on component type
    if (type === "button") {
      defaults.width = this.gridSize * Math.round(PHI * 8)
      defaults.height = this.gridSize * Math.round(PHI * 3)
      defaults.text = "Button"
    } else if (type === "input") {
      defaults.width = this.gridSize * Math.round(PHI * 12)
      defaults.height = this.gridSize * Math.round(PHI * 3)
      defaults.text = ""
      defaults.placeholder = "Enter text..."
    } else if (type === "card") {
      defaults.width = this.gridSize * Math.round(PHI * 16)
      defaults.height = this.gridSize * Math.round(PHI * 10)
      defaults.title = "Card Title"
      defaults.content = "Card content goes here"
    }
    
    var component = { ...defaults, ...options }
    
    // Apply golden ratio proportions if appropriate
    if (type === "card" && !options.height && options.width) {
      component.height = Math.round(options.width / this.phi)
    }
    
    // Store component
    this.components.push(component)
    
    print(`Created ${type} component: ${component.id}`)
    return component
  }
  
  function applyLayout(containerId, layout = "phi-grid") {
    var container = this.containers.find(c => c.id === containerId)
    if (!container) {
      print("Error: Container not found")
      return
    }
    
    var containerComponents = this.components.filter(c => c.container === containerId)
    print(`Applying ${layout} layout to ${containerComponents.length} components in ${containerId}`)
    
    if (layout === "phi-grid") {
      this._applyPhiGridLayout(container, containerComponents)
    } else if (layout === "phi-spiral") {
      this._applyPhiSpiralLayout(container, containerComponents)
    } else if (layout === "phi-cascade") {
      this._applyPhiCascadeLayout(container, containerComponents)
    } else {
      print("Unknown layout type: " + layout)
    }
  }
  
  function _applyPhiGridLayout(container, components) {
    // Apply a grid layout based on the golden ratio
    print("Applying phi-grid layout with golden ratio proportions")
    
    var padding = container.padding || this.gridSize * 2
    var gap = container.gap || this.gridSize
    
    // Calculate phi-based column width
    var baseWidth = Math.round((container.width - padding * 2) / (1 + this.phi))
    var wideWidth = Math.round(baseWidth * this.phi)
    
    // Calculate positions
    for (var i = 0; i < components.length; i++) {
      var row = Math.floor(i / 2)
      var col = i % 2
      
      var x = padding + (col === 0 ? 0 : baseWidth + gap)
      var y = padding + row * (components[0].height + gap)
      
      components[i].x = x
      components[i].y = y
      components[i].width = col === 0 ? baseWidth : wideWidth
      
      print(`Positioned ${components[i].id} at (${x}, ${y}) with width ${components[i].width}`)
    }
  }
  
  function _applyPhiSpiralLayout(container, components) {
    // Position components in a Fibonacci spiral pattern
    print("Applying phi-spiral layout with Fibonacci sequence")
    
    var centerX = container.width / 2
    var centerY = container.height / 2
    var radius = Math.min(container.width, container.height) / 4
    
    for (var i = 0; i < components.length; i++) {
      // Calculate angle based on golden ratio
      var angle = i * this.phi * Math.PI * 2
      
      // Calculate spiral radius
      var spiralRadius = radius * Math.sqrt(i + 1) / 2
      
      // Calculate position
      var x = centerX + Math.cos(angle) * spiralRadius - components[i].width / 2
      var y = centerY + Math.sin(angle) * spiralRadius - components[i].height / 2
      
      components[i].x = Math.round(x)
      components[i].y = Math.round(y)
      
      print(`Positioned ${components[i].id} on spiral at (${components[i].x}, ${components[i].y})`)
    }
  }
  
  function _applyPhiCascadeLayout(container, components) {
    // Cascade components with phi-based staggering
    print("Applying phi-cascade layout with golden ratio staggering")
    
    var startX = container.padding || this.gridSize * 2
    var startY = container.padding || this.gridSize * 2
    var xOffset = this.gridSize * PHI
    var yOffset = this.gridSize * PHI_INV
    
    for (var i = 0; i < components.length; i++) {
      components[i].x = startX + i * xOffset
      components[i].y = startY + i * yOffset
      
      print(`Positioned ${components[i].id} at (${components[i].x}, ${components[i].y})`)
    }
  }
  
  function generatePhiColors(baseColor = "#D4AF37", count = 5) {
    // Generate a harmonious color palette based on phi
    print("Generating phi-harmonized color palette")
    
    var colors = [baseColor]
    var hsl = this._hexToHSL(baseColor)
    
    for (var i = 1; i < count; i++) {
      // Update hue using golden ratio
      hsl.h = (hsl.h + 360 * PHI_INV) % 360
      
      // Generate new color
      colors.push(this._hslToHex(hsl.h, hsl.s, hsl.l))
    }
    
    print("Generated " + colors.length + " phi-harmonized colors")
    return colors
  }
  
  function _hexToHSL(hex) {
    // Convert hex to HSL (simplified for example)
    return { h: 45, s: 70, l: 50 } // Gold-like color
  }
  
  function _hslToHex(h, s, l) {
    // Convert HSL to hex (simplified for example)
    return "#" + Math.floor(Math.random() * 16777215).toString(16)
  }
  
  function applyAnimation(componentId, animationType = "phi-fade") {
    var component = this.components.find(c => c.id === componentId)
    if (!component) {
      print("Error: Component not found")
      return
    }
    
    print(`Applying ${animationType} animation to ${componentId}`)
    
    // Set animation properties
    component.animation = {
      type: animationType,
      duration: 500 * PHI_INV, // Phi-optimized duration
      delay: 100 * PHI_INV,
      easing: "phi-cubic-bezier" // Special phi-based easing function
    }
    
    return component.animation
  }
  
  function render() {
    print("Rendering PhiUI interface with " + this.components.length + " components")
    
    // Render containers
    for (var i = 0; i < this.containers.length; i++) {
      var container = this.containers[i]
      print(`Rendering container ${container.id} (${container.width}x${container.height})`)
    }
    
    // Render components
    for (var i = 0; i < this.components.length; i++) {
      var component = this.components[i]
      print(`Rendering ${component.type} component: ${component.id} at (${component.x}, ${component.y})`)
      
      if (component.animation) {
        print(`  - With ${component.animation.type} animation (${component.animation.duration}ms)`)
      }
    }
    
    return {
      containers: this.containers.length,
      components: this.components.length,
      theme: this.theme,
      phiRatio: this.phi
    }
  }
}

// Initialize PhiUI
var ui = new PhiUI("dark")

// Create main container
var mainContainer = ui.createContainer({
  id: "main",
  width: 1200,
  height: 800
})

// Create components
ui.createComponent("card", {
  container: "main",
  title: "Golden Ratio Design",
  content: "Using the divine proportion (φ = 1.618...) for visually pleasing interfaces"
})

ui.createComponent("button", {
  container: "main",
  text: "Phi Action"
})

ui.createComponent("input", {
  container: "main",
  placeholder: "Enter phi-optimized text..."
})

ui.createComponent("card", {
  container: "main",
  title: "Fibonacci Sequence",
  content: "1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ..."
})

// Apply phi-based layout
ui.applyLayout("main", "phi-grid")

// Generate phi-harmonious color palette
var colors = ui.generatePhiColors("#D4AF37", 5)
print("Phi-harmonized color palette: " + colors.join(", "))

// Apply animations
ui.applyAnimation("card_1", "phi-fade")
ui.applyAnimation("button_1", "phi-slide")

// Render the UI
var result = ui.render()
print("Rendered PhiUI interface with " + result.components + " components")
print("Using golden ratio (φ): " + result.phiRatio)