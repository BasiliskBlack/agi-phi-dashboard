# Phixeo OS UI Component System
# Demonstrates Phixeo's UI creation syntax and geometric optimization

# Import Phixeo standard libraries
import "std:ui"
import "std:animation"
import "std:geometry"

# Import our system core
import "phixeo_system.phx"

# Constants
const GOLDEN_RATIO = 1.618033988749895
const SCREEN_WIDTH = UI.get_screen_width()
const SCREEN_HEIGHT = UI.get_screen_height()

# Define a UI component using Phixeo's component syntax
component Window {
    # Properties with type annotations and geometry-based defaults
    prop title: String = "Phixeo Window"
    prop width: Float = SCREEN_WIDTH / GOLDEN_RATIO
    prop height: Float = SCREEN_HEIGHT / GOLDEN_RATIO
    prop x: Float = (SCREEN_WIDTH - width) / 2
    prop y: Float = (SCREEN_HEIGHT - height) / 2
    prop color: String = "#1A1A1A"
    prop border_color: String = "#FFD700"
    
    # State variables
    state is_dragging: Boolean = false
    state is_resizing: Boolean = false
    state drag_offset_x: Float = 0
    state drag_offset_y: Float = 0
    
    # Render function defines the UI structure
    render() {
        # Create container with golden ratio proportions
        <div
            class="window"
            style="
                position: absolute;
                width: ${this.width}px;
                height: ${this.height}px;
                left: ${this.x}px;
                top: ${this.y}px;
                background-color: ${this.color};
                border: 1px solid ${this.border_color};
                border-radius: ${8 * (GOLDEN_RATIO - 1)}px;
                box-shadow: 0 ${4 * GOLDEN_RATIO}px ${8 * GOLDEN_RATIO}px rgba(0,0,0,0.3);
                display: flex;
                flex-direction: column;
                overflow: hidden;
            "
        >
            # Window header with drag functionality
            <div
                class="window-header"
                style="
                    padding: ${8 * (GOLDEN_RATIO - 1)}px;
                    background: linear-gradient(135deg, #2A2A2A, #1A1A1A);
                    border-bottom: 1px solid ${this.border_color};
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    cursor: move;
                "
                on:mousedown={this.start_drag}
                on:mousemove={this.on_drag}
                on:mouseup={this.stop_drag}
            >
                <h3 style="color: ${this.border_color}; margin: 0;">${this.title}</h3>
                
                # Window controls with fractal spacing
                <div style="display: flex; gap: ${4 * (GOLDEN_RATIO - 1)}px;">
                    <button
                        class="window-control minimize"
                        style="
                            width: ${10 * (GOLDEN_RATIO - 1)}px;
                            height: ${10 * (GOLDEN_RATIO - 1)}px;
                            border-radius: 50%;
                            background: #FFC107;
                            border: none;
                            cursor: pointer;
                        "
                        on:click={this.minimize}
                    ></button>
                    <button
                        class="window-control maximize"
                        style="
                            width: ${10 * (GOLDEN_RATIO - 1)}px;
                            height: ${10 * (GOLDEN_RATIO - 1)}px;
                            border-radius: 50%;
                            background: #4CAF50;
                            border: none;
                            cursor: pointer;
                        "
                        on:click={this.maximize}
                    ></button>
                    <button
                        class="window-control close"
                        style="
                            width: ${10 * (GOLDEN_RATIO - 1)}px;
                            height: ${10 * (GOLDEN_RATIO - 1)}px;
                            border-radius: 50%;
                            background: #F44336;
                            border: none;
                            cursor: pointer;
                        "
                        on:click={this.close}
                    ></button>
                </div>
            </div>
            
            # Window content area
            <div
                class="window-content"
                style="
                    flex: 1;
                    padding: ${12 * (GOLDEN_RATIO - 1)}px;
                    overflow: auto;
                "
            >
                <slot />
            </div>
            
            # Resize handle with golden positioning
            <div
                class="resize-handle"
                style="
                    position: absolute;
                    width: ${12 * (GOLDEN_RATIO - 1)}px;
                    height: ${12 * (GOLDEN_RATIO - 1)}px;
                    right: ${2 * (GOLDEN_RATIO - 1)}px;
                    bottom: ${2 * (GOLDEN_RATIO - 1)}px;
                    cursor: nwse-resize;
                    background: ${this.border_color};
                    opacity: 0.6;
                    border-radius: ${3 * (GOLDEN_RATIO - 1)}px;
                "
                on:mousedown={this.start_resize}
                on:mousemove={this.on_resize}
                on:mouseup={this.stop_resize}
            ></div>
        </div>
    }
    
    # Event handlers with optimized algorithms
    func start_drag(event) -> Void {
        this.is_dragging = true
        this.drag_offset_x = event.clientX - this.x
        this.drag_offset_y = event.clientY - this.y
    }
    
    func on_drag(event) -> Void {
        if (this.is_dragging) {
            this.x = event.clientX - this.drag_offset_x
            this.y = event.clientY - this.drag_offset_y
            
            # Apply constraints to keep window in bounds
            if (this.x < 0) this.x = 0
            if (this.y < 0) this.y = 0
            if (this.x + this.width > SCREEN_WIDTH) {
                this.x = SCREEN_WIDTH - this.width
            }
            if (this.y + this.height > SCREEN_HEIGHT) {
                this.y = SCREEN_HEIGHT - this.height
            }
        }
    }
    
    func stop_drag() -> Void {
        this.is_dragging = false
    }
    
    func start_resize(event) -> Void {
        this.is_resizing = true
    }
    
    func on_resize(event) -> Void {
        if (this.is_resizing) {
            # Calculate new dimensions with golden ratio preservation
            this.width = Math.max(200, event.clientX - this.x)
            this.height = Math.max(150, event.clientY - this.y)
            
            # Apply geometric optimization to maintain proportions
            if (Math.abs(this.width / this.height - GOLDEN_RATIO) < 0.5) {
                # Snap to golden ratio if close
                this.height = this.width / GOLDEN_RATIO
            }
        }
    }
    
    func stop_resize() -> Void {
        this.is_resizing = false
    }
    
    func minimize() -> Void {
        Animation.apply({
            target: this,
            property: "height",
            value: 0,
            duration: 300,
            easing: "easeOutQuad",
            onComplete: () => {
                UI.minimize_window(this)
            }
        })
    }
    
    func maximize() -> Void {
        Animation.apply({
            target: this,
            property: "width",
            value: SCREEN_WIDTH,
            duration: 300,
            easing: "easeOutQuad"
        })
        
        Animation.apply({
            target: this,
            property: "height",
            value: SCREEN_HEIGHT,
            duration: 300,
            easing: "easeOutQuad"
        })
        
        Animation.apply({
            target: this,
            property: "x",
            value: 0,
            duration: 300,
            easing: "easeOutQuad"
        })
        
        Animation.apply({
            target: this,
            property: "y",
            value: 0,
            duration: 300,
            easing: "easeOutQuad"
        })
    }
    
    func close() -> Void {
        Animation.apply({
            target: this,
            property: "opacity",
            value: 0,
            duration: 300,
            easing: "easeOutQuad",
            onComplete: () => {
                UI.close_window(this)
            }
        })
    }
}

# Define a terminal component for Phixeo OS
component PhixeoTerminal {
    # Properties
    prop width: Float = 600
    prop height: Float = 400
    prop prompt: String = "phixeo> "
    
    # State
    state command_history: Array<String> = []
    state current_command: String = ""
    state history_index: Integer = -1
    
    # Render function
    render() {
        <Window
            title="Phixeo Terminal"
            width={this.width}
            height={this.height}
            color="#000000"
            border_color="#FFD700"
        >
            <div
                class="terminal-content"
                style="
                    font-family: 'Fira Code', monospace;
                    color: #FFD700;
                    background: #000;
                    height: 100%;
                    overflow-y: auto;
                    padding: ${8 * (GOLDEN_RATIO - 1)}px;
                "
            >
                # Display command history
                for (command in this.command_history) {
                    <div class="terminal-line">
                        <span class="prompt" style="color: #FFD700;">${this.prompt}</span>
                        <span class="command">${command.text}</span>
                    </div>
                    <div class="terminal-output">${command.output}</div>
                }
                
                # Command input line
                <div class="terminal-input-line" style="display: flex;">
                    <span class="prompt" style="color: #FFD700;">${this.prompt}</span>
                    <input
                        type="text"
                        value={this.current_command}
                        style="
                            flex: 1;
                            background: transparent;
                            border: none;
                            color: #FFFFFF;
                            font-family: 'Fira Code', monospace;
                            outline: none;
                            caret-color: #FFD700;
                        "
                        on:input={this.update_command}
                        on:keydown={this.handle_key_press}
                        autofocus
                    />
                </div>
            </div>
        </Window>
    }
    
    # Event handlers
    func update_command(event) -> Void {
        this.current_command = event.target.value
    }
    
    func handle_key_press(event) -> Void {
        # Handle Enter key
        if (event.key == "Enter") {
            this.execute_command()
        }
        
        # Handle Up arrow for history navigation
        if (event.key == "ArrowUp") {
            if (this.history_index < this.command_history.length - 1) {
                this.history_index++
                this.current_command = this.command_history[this.history_index].text
            }
            event.preventDefault()
        }
        
        # Handle Down arrow for history navigation
        if (event.key == "ArrowDown") {
            if (this.history_index > 0) {
                this.history_index--
                this.current_command = this.command_history[this.history_index].text
            } else if (this.history_index == 0) {
                this.history_index = -1
                this.current_command = ""
            }
            event.preventDefault()
        }
    }
    
    # Execute the entered command
    func execute_command() -> Void {
        var command = this.current_command.trim()
        if (command == "") return
        
        var output = ""
        
        # Process the command
        if (command == "help") {
            output = "Available commands: help, version, system, optimize, clear"
        } else if (command == "version") {
            output = "Phixeo OS v1.0"
        } else if (command == "system") {
            var sys = getSystemInstance()
            var metrics = sys.monitor_system()
            output = "System metrics:\n"
            for (key in metrics.keys()) {
                output += "  " + key + ": " + metrics[key] + "\n"
            }
            output += "Efficiency score: " + sys.calculate_efficiency_score()
        } else if (command == "optimize") {
            var sys = getSystemInstance()
            var gain = sys.apply_fractal_optimization()
            output = "Applied fractal optimization: " + gain.toFixed(2) + "% efficiency gain"
        } else if (command == "clear") {
            this.command_history = []
            this.current_command = ""
            return
        } else {
            output = "Command not recognized: " + command
        }
        
        # Add to history
        this.command_history.push({
            text: command,
            output: output
        })
        
        # Reset current command and history index
        this.current_command = ""
        this.history_index = -1
    }
}

# Define the app component
component PhixeoApp {
    render() {
        <div
            style="
                width: 100%;
                height: 100vh;
                background: linear-gradient(135deg, #121212, #1A1A1A);
                overflow: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
            "
        >
            <PhixeoTerminal 
                width={800} 
                height={600} 
                prompt="phixeo$ "
            />
        </div>
    }
}

# Initialize and mount the app
UI.render(<PhixeoApp />, document.getElementById("root"))